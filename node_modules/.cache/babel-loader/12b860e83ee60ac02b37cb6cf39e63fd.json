{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Charu\\\\Desktop\\\\Project_Board-main\\\\frontend\\\\src\\\\components\\\\Eventscalendar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useLayoutEffect, useEffect } from 'react';\nimport '../stylesheets/eventsCalendar.css';\nimport { Row, Col, Container, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Eventscalendar = () => {\n  _s();\n\n  const [fullscreen, setFullscreen] = useState(true);\n  const [show, setShow] = useState(false);\n\n  const handleShow = () => {\n    setFullscreen(true);\n    setShow(true);\n  };\n\n  const [tasks, setTasks] = useState([]);\n  const [projects, setProjects] = useState([]);\n  const [allEvents, setAllEvents] = useState([]);\n\n  const showTasks = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/showTasks', {\n        method: 'GET'\n      });\n      const data = await response.json(); // console.log(data)\n\n      setTasks(data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const showProjects = async () => {\n    try {\n      const response = await fetch('/getProjects', {\n        method: 'GET'\n      });\n      const data = await response.json();\n      setProjects(data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    showTasks();\n    showProjects();\n  }, []);\n\n  const createEvents = () => {\n    let events = [];\n\n    for (let items of tasks) {\n      events.push({\n        title: items.task,\n        date: items.date.substring(0, 10)\n      });\n    }\n\n    for (let items of projects) {\n      events.push({\n        title: items.projectTitle,\n        date: items.dueDate.substring(0, 10)\n      });\n    }\n\n    console.log(events);\n    setAllEvents(events);\n  };\n\n  useEffect(() => {\n    createEvents();\n  }, [tasks, projects]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ListGroup.Item, {\n      className: \"navList\",\n      onClick: handleShow,\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fa fa-calendar\",\n        children: \"\\xA0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), ' ', \"Calendar View\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      fullscreen: fullscreen,\n      onHide: () => setShow(false),\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        className: \"modalHeader\",\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Due Projects & Tasks\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        className: \"modalBody\",\n        children: /*#__PURE__*/_jsxDEV(FullCalendar, {\n          plugins: [dayGridPlugin, timeGridPlugin],\n          initialView: \"dayGridMonth\" // events={[\n          //     { title: 'event 1', date: '2022-10-13' },\n          //     { title: 'event 2', date: '2022-10-13' }\n          //   ]}\n          ,\n          events: allEvents\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Eventscalendar, \"nxAdmkGX5Ej5RwTDeg8z91rKUYg=\");\n\n_c = Eventscalendar;\nexport default Eventscalendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Eventscalendar\");","map":{"version":3,"sources":["C:/Users/Charu/Desktop/Project_Board-main/frontend/src/components/Eventscalendar.js"],"names":["React","useState","useLayoutEffect","useEffect","Row","Col","Container","Navbar","Nav","NavDropdown","Form","Image","Button","ListGroup","Offcanvas","InputGroup","Modal","FullCalendar","dayGridPlugin","timeGridPlugin","Eventscalendar","fullscreen","setFullscreen","show","setShow","handleShow","tasks","setTasks","projects","setProjects","allEvents","setAllEvents","showTasks","response","fetch","method","data","json","error","console","log","showProjects","createEvents","events","items","push","title","task","date","substring","projectTitle","dueDate"],"mappings":"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","sourcesContent":["import React, {useState, useLayoutEffect, useEffect} from 'react'\nimport '../stylesheets/eventsCalendar.css'\nimport { Row, Col,Container, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\nimport FullCalendar from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid';\n\n\n\nconst Eventscalendar = () => {\n    const [fullscreen, setFullscreen] = useState(true);\n    const [show, setShow] = useState(false);\n    const handleShow = () => {setFullscreen(true); setShow(true);}\n    const [tasks, setTasks] = useState([]);\n    const [projects, setProjects] = useState([]);\n    const [allEvents, setAllEvents] = useState([]);\n    \n\n    const showTasks = async () =>{\n        try {\n          const response = await fetch('http://localhost:5000/showTasks', {\n            method: 'GET',\n        });\n  \n        const data = await response.json();\n        // console.log(data)\n        setTasks(data);\n\n        } catch (error) {\n          console.log(error)\n        }\n      \n  }\n\n\n  const showProjects = async () =>{\n    try {\n      const response = await fetch('/getProjects', {\n        method: 'GET',\n    });\n\n    const data = await response.json();\n\n    setProjects(data)\n\n    } catch (error) {\n      console.log(error)\n    }\n  \n}\n\n  useEffect(() =>{\n      showTasks();\n      showProjects();\n  },[])\n\n\n  const createEvents = () =>{\n    let events = [];\n\n    for(let items of tasks){\n        events.push({\n            title: items.task,\n            date: items.date.substring(0,10)\n        })\n  \n    }\n\n    for(let items of projects){\n        events.push({\n            title: items.projectTitle,\n            date: items.dueDate.substring(0,10)\n        })\n    }\n\n    console.log(events)\n    setAllEvents(events)\n\n  }\n\n\n  useEffect(() =>{\n    createEvents();\n},[tasks, projects])\n\n  return (\n    <>\n      <ListGroup.Item className='navList' onClick={handleShow}>\n        <i className='fa fa-calendar'>&nbsp;</i>         \n        {' '}\n        Calendar View\n      </ListGroup.Item>\n      <Modal show={show} fullscreen={fullscreen} onHide={() => setShow(false)}>\n        <Modal.Header closeButton className='modalHeader'>\n          <Modal.Title>Due Projects & Tasks</Modal.Title>\n        </Modal.Header>\n        <Modal.Body className='modalBody'>\n\n        <FullCalendar\n        plugins={[ dayGridPlugin, timeGridPlugin ]}\n        initialView=\"dayGridMonth\"\n        // events={[\n        //     { title: 'event 1', date: '2022-10-13' },\n        //     { title: 'event 2', date: '2022-10-13' }\n        //   ]}\n        events={allEvents}\n        />\n        \n        </Modal.Body>\n      </Modal>\n    \n    </>\n  )\n}\n\nexport default Eventscalendar"]},"metadata":{},"sourceType":"module"}